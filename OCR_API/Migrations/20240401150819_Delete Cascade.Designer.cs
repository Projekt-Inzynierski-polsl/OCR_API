// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OCR_API.DbContexts;

#nullable disable

namespace OCR_API.Migrations
{
    [DbContext(typeof(SystemDbContext))]
    [Migration("20240401150819_Delete Cascade")]
    partial class DeleteCascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("NoteNoteCategory", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("NotesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "NotesId");

                    b.HasIndex("NotesId");

                    b.ToTable("notes_category_map", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.BlackListToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "black_listed_tokens_ibfk_1");

                    b.ToTable("black_listed_tokens", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.BoundingBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("json")
                        .HasColumnName("coordinates")
                        .HasDefaultValueSql("'{}'");

                    b.Property<int>("NoteFileId")
                        .HasColumnType("int")
                        .HasColumnName("file_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "NoteFileId" }, "bounding_box_ibfk_1");

                    b.ToTable("bounding_boxes", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IconPath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("icon_path");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "folder_ibfk_1");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<int>("FolderId")
                        .HasColumnType("int")
                        .HasColumnName("folder_id");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_private");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("NoteFileId")
                        .HasColumnType("int")
                        .HasColumnName("file_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "notes_ibfk_1");

                    b.HasIndex(new[] { "FolderId" }, "notes_ibfk_2");

                    b.HasIndex(new[] { "NoteFileId" }, "notes_ibfk_3");

                    b.ToTable("notes", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.NoteCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "note_category_list_ibfk_1");

                    b.ToTable("note_category_list", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.NoteFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("note_files", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.NoteLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BoundingBoxId")
                        .HasColumnType("int")
                        .HasColumnName("path");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("content");

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("json")
                        .HasColumnName("coordinates")
                        .HasDefaultValueSql("'{}'");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BoundingBoxId" }, "note_lines_ibfk_1");

                    b.ToTable("note_lines", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.NoteWorldError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoundingBoxId")
                        .HasColumnType("int");

                    b.Property<string>("CorrectContent")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("correct_content");

                    b.Property<int>("LineId")
                        .HasColumnType("int")
                        .HasColumnName("line_id");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("BoundingBoxId");

                    b.HasIndex("NoteId");

                    b.HasIndex(new[] { "LineId" }, "note_world_errors_ibfk_1");

                    b.ToTable("note_world_errors", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.UploadedModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("path");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("upload_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "uploaded_model_ibfk_1");

                    b.ToTable("uploaded_models", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nick");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "RoleId" }, "user_ibfk_1");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.UserAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("user_actions", (string)null);
                });

            modelBuilder.Entity("OCR_API.Entities.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int")
                        .HasColumnName("action_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<DateTime>("LogTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("log_time");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "user_logs_ibfk_1");

                    b.HasIndex(new[] { "ActionId" }, "user_logs_ibfk_2");

                    b.ToTable("user_logs", (string)null);
                });

            modelBuilder.Entity("NoteNoteCategory", b =>
                {
                    b.HasOne("OCR_API.Entities.NoteCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCR_API.Entities.Note", null)
                        .WithMany()
                        .HasForeignKey("NotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCR_API.Entities.BlackListToken", b =>
                {
                    b.HasOne("OCR_API.Entities.User", "User")
                        .WithMany("BlackListedTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("black_listed_tokens_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCR_API.Entities.BoundingBox", b =>
                {
                    b.HasOne("OCR_API.Entities.NoteFile", "NoteFile")
                        .WithMany("BoundingBoxes")
                        .HasForeignKey("NoteFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bounding_box_ibfk_1");

                    b.Navigation("NoteFile");
                });

            modelBuilder.Entity("OCR_API.Entities.Folder", b =>
                {
                    b.HasOne("OCR_API.Entities.User", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("folder_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCR_API.Entities.Note", b =>
                {
                    b.HasOne("OCR_API.Entities.Folder", "Folder")
                        .WithMany("Notes")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notes_ibfk_2");

                    b.HasOne("OCR_API.Entities.NoteFile", "NoteFile")
                        .WithMany("Notes")
                        .HasForeignKey("NoteFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notes_ibfk_3");

                    b.HasOne("OCR_API.Entities.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("notes_ibfk_1");

                    b.Navigation("Folder");

                    b.Navigation("NoteFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCR_API.Entities.NoteCategory", b =>
                {
                    b.HasOne("OCR_API.Entities.User", "User")
                        .WithMany("NoteCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_category_list_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCR_API.Entities.NoteLine", b =>
                {
                    b.HasOne("OCR_API.Entities.BoundingBox", "BoundingBox")
                        .WithMany("Lines")
                        .HasForeignKey("BoundingBoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_lines_ibfk_1");

                    b.Navigation("BoundingBox");
                });

            modelBuilder.Entity("OCR_API.Entities.NoteWorldError", b =>
                {
                    b.HasOne("OCR_API.Entities.BoundingBox", null)
                        .WithMany("WorldErrors")
                        .HasForeignKey("BoundingBoxId");

                    b.HasOne("OCR_API.Entities.NoteLine", "Line")
                        .WithMany("WorldErrors")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("note_world_errors_ibfk_1");

                    b.HasOne("OCR_API.Entities.Note", null)
                        .WithMany("WorldErrors")
                        .HasForeignKey("NoteId");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("OCR_API.Entities.UploadedModel", b =>
                {
                    b.HasOne("OCR_API.Entities.User", "User")
                        .WithMany("UploadedModels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("uploaded_models_ibfk_1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCR_API.Entities.User", b =>
                {
                    b.HasOne("OCR_API.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_ibfk_1");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("OCR_API.Entities.UserLog", b =>
                {
                    b.HasOne("OCR_API.Entities.UserAction", "Action")
                        .WithMany("Logs")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_logs_ibfk_2");

                    b.HasOne("OCR_API.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_logs_ibfk_1");

                    b.Navigation("Action");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OCR_API.Entities.BoundingBox", b =>
                {
                    b.Navigation("Lines");

                    b.Navigation("WorldErrors");
                });

            modelBuilder.Entity("OCR_API.Entities.Folder", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("OCR_API.Entities.Note", b =>
                {
                    b.Navigation("WorldErrors");
                });

            modelBuilder.Entity("OCR_API.Entities.NoteFile", b =>
                {
                    b.Navigation("BoundingBoxes");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("OCR_API.Entities.NoteLine", b =>
                {
                    b.Navigation("WorldErrors");
                });

            modelBuilder.Entity("OCR_API.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("OCR_API.Entities.User", b =>
                {
                    b.Navigation("BlackListedTokens");

                    b.Navigation("Folders");

                    b.Navigation("Logs");

                    b.Navigation("NoteCategories");

                    b.Navigation("Notes");

                    b.Navigation("UploadedModels");
                });

            modelBuilder.Entity("OCR_API.Entities.UserAction", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
